package main.java.org.anynomous;

import javax.swing.*;
import javax.swing.border.*;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.List;
import javax.swing.SwingWorker;
import main.java.org.anynomous.utils.PremiumAccessManager;
import main.java.org.anynomous.AuthenticationEndpoint;
import main.java.org.anynomous.utils.PremiumAccessManager.PremiumAccessListener;


public class Malware extends JPanel implements PremiumAccessListener {

    private static final Color PRIMARY_DARK = new Color(17, 24, 39);
    private static final Color SECONDARY_DARK = new Color(31, 41, 55);
    private static final Color ACCENT_COLOR = new Color(59, 130, 246);
    private static final Color ACCENT_HOVER = new Color(96, 165, 250);
    private static final Color DANGER_COLOR = new Color(220, 38, 38);
    private static final Color TEXT_PRIMARY = new Color(243, 244, 246);
    private static final Color TEXT_SECONDARY = new Color(156, 163, 175);
    private static final Color BORDER_COLOR = new Color(55, 65, 81);

    private static final Font HEADER_FONT = new Font("Inter", Font.BOLD, 36);
    private static final Font SUBTITLE_FONT = new Font("Inter", Font.BOLD, 18);
    private static final Font BUTTON_FONT = new Font("Inter", Font.BOLD, 14);
    private static final Font LOG_FONT = new Font("JetBrains Mono", Font.PLAIN, 13);

    private static final int BUTTON_HEIGHT = 44;
    private static final int BUTTON_WIDTH = 220;
    private static final int PANEL_PADDING = 32;
    private static final int COMPONENT_SPACING = 24;
    private static final int CORNER_RADIUS = 12;

    private JTextArea logArea;
    private PremiumAccessManager premiumAccessManager;
    private JPanel premiumOverlayPanel;
    private boolean hasPremiumAccess = false;

    // Flag to prevent recursive premium access checks
    private volatile boolean isPremiumCheckInProgress = false;

    public Malware() {
        // Check premium access first
        premiumAccessManager = PremiumAccessManager.getInstance();
        premiumAccessManager.addPremiumAccessListener(this);
        checkPremiumAccess();
        
        setupMainPanel();
        createLayout();
        
        // Add premium overlay if needed
        if (!hasPremiumAccess) {
            addPremiumOverlay();
        }
    }

    private void setupMainPanel() {
        setBackground(PRIMARY_DARK);
        setLayout(new BorderLayout(PANEL_PADDING, PANEL_PADDING));
        setBorder(new EmptyBorder(PANEL_PADDING, PANEL_PADDING, PANEL_PADDING, PANEL_PADDING));
    }

    private void createLayout() {
        JPanel mainContent = new JPanel();
        mainContent.setLayout(new BoxLayout(mainContent, BoxLayout.Y_AXIS));
        mainContent.setBackground(PRIMARY_DARK);

        mainContent.add(createHeaderPanel());
        mainContent.add(Box.createRigidArea(new Dimension(0, COMPONENT_SPACING)));
        mainContent.add(createControlPanel());
        mainContent.add(Box.createRigidArea(new Dimension(0, COMPONENT_SPACING)));
        mainContent.add(createLogPanel());

        add(mainContent, BorderLayout.CENTER);
    }

    private JPanel createHeaderPanel() {
        JPanel headerPanel = new JPanel();
        headerPanel.setLayout(new BoxLayout(headerPanel, BoxLayout.Y_AXIS));
        headerPanel.setBackground(PRIMARY_DARK);
        headerPanel.setBorder(new EmptyBorder(0, 0, COMPONENT_SPACING, 0));

        // Create a panel for the icon with a subtle background
        JPanel iconContainer = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(SECONDARY_DARK);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), CORNER_RADIUS * 2, CORNER_RADIUS * 2);
            }
        };
        iconContainer.setOpaque(false);
        iconContainer.setPreferredSize(new Dimension(80, 80));
        iconContainer.setMaximumSize(new Dimension(80, 80));

        JLabel iconLabel = new JLabel("\uD83D\uDEE1");
        iconLabel.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 48));
        iconLabel.setForeground(ACCENT_COLOR);
        iconContainer.add(iconLabel);
        iconContainer.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel header = new JLabel("Malware Scanner");
        header.setForeground(TEXT_PRIMARY);
        header.setFont(HEADER_FONT);
        header.setAlignmentX(Component.CENTER_ALIGNMENT);

        JLabel subtitle = new JLabel("Real-time Network Traffic Protection");
        subtitle.setForeground(TEXT_SECONDARY);
        subtitle.setFont(SUBTITLE_FONT);
        subtitle.setAlignmentX(Component.CENTER_ALIGNMENT);

        headerPanel.add(iconContainer);
        headerPanel.add(Box.createRigidArea(new Dimension(0, COMPONENT_SPACING)));
        headerPanel.add(header);
        headerPanel.add(Box.createRigidArea(new Dimension(0, 12)));
        headerPanel.add(subtitle);

        return headerPanel;
    }

    private JPanel createControlPanel() {
        JPanel controlPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(SECONDARY_DARK);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), CORNER_RADIUS, CORNER_RADIUS);
            }
        };
        controlPanel.setOpaque(false);
        controlPanel.setLayout(new FlowLayout(FlowLayout.CENTER, COMPONENT_SPACING, COMPONENT_SPACING));
        controlPanel.setBorder(new EmptyBorder(16, 16, 16, 16));

        JButton configButton = createButton("Folder Scan",
                e -> checkScripts(),
                ACCENT_COLOR, ACCENT_HOVER);

        JButton networkButton = createButton("Process Scan",
                e -> executePythonScript("PythonScripts/Malware/Process.py"),
                DANGER_COLOR, new Color(239, 68, 68));

        controlPanel.add(configButton);
        controlPanel.add(networkButton);

        return controlPanel;
    }

    private JPanel createLogPanel() {
        JPanel logPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(SECONDARY_DARK);
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), CORNER_RADIUS, CORNER_RADIUS);
            }
        };
        logPanel.setOpaque(false);
        logPanel.setLayout(new BorderLayout());

        // Create header with icon
        JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 12, 0));
        headerPanel.setOpaque(false);
        headerPanel.setBorder(new EmptyBorder(16, 20, 16, 20));

        JLabel terminalIcon = new JLabel("‚å®");
        terminalIcon.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 18));
        terminalIcon.setForeground(TEXT_PRIMARY);

        JLabel logHeader = new JLabel("Activity Log");
        logHeader.setFont(BUTTON_FONT);
        logHeader.setForeground(TEXT_PRIMARY);

        headerPanel.add(terminalIcon);
        headerPanel.add(logHeader);

        // Customize log area
        logArea = new JTextArea();
        logArea.setBackground(PRIMARY_DARK);
        logArea.setForeground(TEXT_PRIMARY);
        logArea.setFont(LOG_FONT);
        logArea.setEditable(false);
        logArea.setLineWrap(true);
        logArea.setWrapStyleWord(true);
        logArea.setBorder(new EmptyBorder(12, 16, 12, 16));
        logArea.setCaretColor(TEXT_PRIMARY);

        // Custom scroll pane
        JScrollPane scrollPane = new JScrollPane(logArea);
        scrollPane.setBorder(null);
        scrollPane.setBackground(PRIMARY_DARK);
        scrollPane.getViewport().setBackground(PRIMARY_DARK);

        // Customize scrollbar
        JScrollBar verticalScrollBar = scrollPane.getVerticalScrollBar();
        verticalScrollBar.setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                super.configureScrollBarColors();
                this.trackColor = PRIMARY_DARK;
                this.thumbColor = BORDER_COLOR;
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                return button;
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));
                return button;
            }
        });

        logPanel.add(headerPanel, BorderLayout.NORTH);
        logPanel.add(scrollPane, BorderLayout.CENTER);

        return logPanel;
    }

    private JButton createButton(String label, ActionListener action, Color backgroundColor, Color hoverColor) {
        JButton button = new JButton(label) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                g2d.setColor(getBackground());
                g2d.fillRoundRect(0, 0, getWidth(), getHeight(), CORNER_RADIUS, CORNER_RADIUS);
                super.paintComponent(g);
            }
        };

        button.setFont(BUTTON_FONT);
        button.setBackground(backgroundColor);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setContentAreaFilled(false);
        button.setPreferredSize(new Dimension(BUTTON_WIDTH, BUTTON_HEIGHT));

        button.addMouseListener(new MouseAdapter() {
            public void mouseEntered(MouseEvent evt) {
                button.setBackground(hoverColor);
                button.setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
            public void mouseExited(MouseEvent evt) {
                button.setBackground(backgroundColor);
            }
        });

        button.addActionListener(action);
        return button;
    }

    private void checkScripts() {
        SwingWorker<Void, String> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                logArea.setText("");
                logArea.append("[" + getCurrentTimestamp() + "] scanning for malware...\n");

                try {
                    // Get the project root directory
                    String projectRoot = System.getProperty("user.dir");
                    
                    // Build the path to virtual environment's Python interpreter
                    String venvPython = String.join(File.separator, 
                        projectRoot, 
                        "PythonScripts",
                        ".Venv",
                        "Scripts",
                        "python.exe"
                    );

                    // Add the -nogui flag to prevent Tkinter window from opening
                    ProcessBuilder pb = new ProcessBuilder(venvPython, 
                        "PythonScripts/Malware/Folder.py", 
                        "--nogui");
                    pb.redirectErrorStream(true);
                    pb.directory(new File(projectRoot));
                    
                    Process process = pb.start();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    String line;
                    while ((line = reader.readLine()) != null) {
                        publish("[" + getCurrentTimestamp() + "] " + line);
                    }

                    int exitCode = process.waitFor();
                    publish("[" + getCurrentTimestamp() + "] Configuration audit completed with exit code: " + exitCode);
                    
                } catch (Exception e) {
                    publish("[" + getCurrentTimestamp() + "] Error: " + e.getMessage());
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void process(List<String> chunks) {
                for (String line : chunks) {
                    logArea.append(line + "\n");
                }
            }
        };
        worker.execute();
    }

    private void executePythonScript(String scriptPath) {
        SwingWorker<Void, String> worker = new SwingWorker<>() {
            @Override
            protected Void doInBackground() throws Exception {
                try {
                    String projectRoot = System.getProperty("user.dir");
                    String venvPython = String.join(File.separator, 
                        projectRoot, 
                        "PythonScripts",
                        ".Venv",
                        "Scripts",
                        "python.exe"
                    );

                    // Add the -nogui flag to prevent Tkinter window from opening
                    ProcessBuilder pb = new ProcessBuilder(venvPython, scriptPath, "--nogui");
                    pb.redirectErrorStream(true);
                    pb.directory(new File(projectRoot));

                    Process process = pb.start();
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    String line;

                    publish("[" + getCurrentTimestamp() + "] Starting network audit...\n");
                    while ((line = reader.readLine()) != null) {
                        publish("[" + getCurrentTimestamp() + "] " + line);
                    }

                    int exitCode = process.waitFor();
                    publish("[" + getCurrentTimestamp() + "] Network audit completed with exit code: " + exitCode);

                } catch (Exception e) {
                    publish("[" + getCurrentTimestamp() + "] Error: " + e.getMessage());
                    e.printStackTrace();
                }
                return null;
            }

            @Override
            protected void process(List<String> chunks) {
                for (String line : chunks) {
                    logArea.append(line + "\n");
                }
            }
        };
        worker.execute();
    }

    private String getCurrentTimestamp() {
        return new java.text.SimpleDateFormat("HH:mm:ss").format(new Date());
    }

    /**
     * Check if the current user has premium access
     */
    private void checkPremiumAccess() {
        // Get the current user address from Authentication
        String userAddress = null;
        if (AuthenticationEndpoint.getInstance().getStatus("default").isAuthenticated()) {
            userAddress = AuthenticationEndpoint.getInstance().getStatus("default").getAccount();
        }
        
        // Check premium access
        if (userAddress != null && !userAddress.isEmpty()) {
            hasPremiumAccess = premiumAccessManager.hasPremiumAccess(userAddress);
        } else {
            hasPremiumAccess = false;
        }
    }
    
    /**
     * Add premium overlay that blocks usage of this panel
     */
    private void addPremiumOverlay() {
        // Create semi-transparent overlay
        premiumOverlayPanel = new JPanel(new BorderLayout()) {
            @Override
            protected void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                g2d.setColor(new Color(0, 0, 0, 200)); // Semi-transparent black
                g2d.fillRect(0, 0, getWidth(), getHeight());
                super.paintComponent(g);
            }
        };
        premiumOverlayPanel.setOpaque(false);
        
        // Center panel with premium message
        JPanel messagePanel = new JPanel(new BorderLayout(20, 20));
        messagePanel.setOpaque(false);
        messagePanel.setBorder(BorderFactory.createEmptyBorder(40, 40, 40, 40));
        
        // Premium message
        JLabel lockIcon = new JLabel("üîí");
        lockIcon.setFont(new Font("Segoe UI Emoji", Font.PLAIN, 48));
        lockIcon.setForeground(new Color(255, 215, 0)); // Gold color
        lockIcon.setHorizontalAlignment(SwingConstants.CENTER);
        
        JLabel titleLabel = new JLabel("Premium Feature");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        titleLabel.setForeground(Color.WHITE);
        titleLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        JTextArea messageArea = new JTextArea(
            "This advanced Malware Scanner feature requires premium access. " +
            "Purchase premium access to unlock all advanced features including Security Audit."
        );
        messageArea.setWrapStyleWord(true);
        messageArea.setLineWrap(true);
        messageArea.setOpaque(false);
        messageArea.setEditable(false);
        messageArea.setForeground(Color.WHITE);
        messageArea.setFont(new Font("Segoe UI", Font.PLAIN, 16));
        messageArea.setBackground(new Color(0, 0, 0, 0));
        
        // Purchase button
        JButton purchaseButton = new JButton("Purchase Premium Access");
        purchaseButton.setFont(new Font("Segoe UI", Font.BOLD, 14));
        purchaseButton.setForeground(Color.WHITE);
        purchaseButton.setBackground(new Color(50, 100, 220));
        purchaseButton.setFocusPainted(false);
        purchaseButton.setBorderPainted(false);
        purchaseButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        purchaseButton.addActionListener(e -> {
            premiumAccessManager.showPremiumFeatureDialog(this, () -> {
                premiumAccessManager.openPurchasePage();
            });
        });
        
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        buttonPanel.setOpaque(false);
        buttonPanel.add(purchaseButton);
        
        // Combine all elements
        JPanel contentPanel = new JPanel();
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setOpaque(false);
        contentPanel.add(lockIcon);
        contentPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        contentPanel.add(titleLabel);
        contentPanel.add(Box.createRigidArea(new Dimension(0, 20)));
        contentPanel.add(messageArea);
        contentPanel.add(Box.createRigidArea(new Dimension(0, 30)));
        contentPanel.add(buttonPanel);
        
        messagePanel.add(contentPanel, BorderLayout.CENTER);
        
        // Center the message panel
        premiumOverlayPanel.add(messagePanel, BorderLayout.CENTER);
        
        // Add overlay as glass pane to block interactions with the underlying components
        setLayout(new OverlayLayout(this));
        add(premiumOverlayPanel);
    }

    @Override
    public void onPremiumAccessUpdated(boolean hasPremiumAccess) {
        // Prevent recursive updates
        if (isPremiumCheckInProgress) {
            System.out.println("‚ö†Ô∏è Premium check already in progress in Malware, skipping");
            return;
        }
        
        // Make sure we run UI updates on the Event Dispatch Thread
        SwingUtilities.invokeLater(() -> {
            try {
                isPremiumCheckInProgress = true;
                System.out.println("Premium access updated in Malware class: " + hasPremiumAccess);
                this.hasPremiumAccess = hasPremiumAccess;
                
                // Skip the force check to prevent recursion - just use the value we received
                // forceCheckPremiumAccess();
                
                // Refresh the UI
                refreshUI();
                
                // Force a repaint
                revalidate();
                repaint();
            } finally {
                isPremiumCheckInProgress = false;
            }
        });
    }
    
    /**
     * Force a fresh check of premium access status, bypassing any caching
     */
    private void forceCheckPremiumAccess() {
        // Prevent recursive checks
        if (isPremiumCheckInProgress) {
            System.out.println("‚ö†Ô∏è Premium check already in progress in Malware, skipping force check");
            return;
        }
        
        isPremiumCheckInProgress = true;
        try {
            // Get the current user address from Authentication
            String userAddress = null;
            try {
                if (AuthenticationEndpoint.getInstance() != null && 
                    AuthenticationEndpoint.getInstance().getStatus("default") != null && 
                    AuthenticationEndpoint.getInstance().getStatus("default").isAuthenticated()) {
                    
                    userAddress = AuthenticationEndpoint.getInstance().getStatus("default").getAccount();
                }
            } catch (Exception e) {
                System.err.println("Error getting authenticated user: " + e.getMessage());
                e.printStackTrace();
            }
            
            // Check premium access
            if (userAddress != null && !userAddress.isEmpty()) {
                System.out.println("Forcing premium access check for: " + userAddress);
                
                // Use direct contract check instead of refreshing through manager
                hasPremiumAccess = premiumAccessManager.getBlockchainService().directContractCheck(userAddress);
                System.out.println("Forced premium access check result: " + hasPremiumAccess);
            } else {
                hasPremiumAccess = false;
                System.out.println("No authenticated user to check premium access");
            }
        } finally {
            isPremiumCheckInProgress = false;
        }
    }
    
    /**
     * Refresh the UI based on premium access status
     */
    private void refreshUI() {
        SwingUtilities.invokeLater(() -> {
            // Remove existing overlay if it exists
            if (premiumOverlayPanel != null && premiumOverlayPanel.getParent() != null) {
                remove(premiumOverlayPanel);
            }
            
            // Add overlay if needed
            if (!hasPremiumAccess) {
                addPremiumOverlay();
            }
            
            revalidate();
            repaint();
        });
    }
}